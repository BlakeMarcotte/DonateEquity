rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isDonationParticipant(donationId) {
      // Simplified authorization for Storage rules (can't access Firestore)
      return isAuthenticated() && 
        (
          // Check if user is admin (always allowed)
          isAdmin() ||
          // Allow donors to access donation files (filtered by business logic)
          hasRole('donor') ||
          // Allow nonprofit admins to access donation files
          hasRole('nonprofit_admin') ||
          // Allow appraisers to access donation files
          hasRole('appraiser')
        );
    }
    
    function isParticipantAuthorized(participantId) {
      // Simplified authorization for Storage rules (can't access Firestore)
      return isAuthenticated() && 
        (
          // Check if user is admin (always allowed)
          isAdmin() ||
          // Allow nonprofit admins to access all participant files
          hasRole('nonprofit_admin') ||
          // Allow appraisers to access participant files
          hasRole('appraiser') ||
          // Allow donors to access participant files (they'll be filtered by business logic)
          hasRole('donor')
        );
    }
    
    function isCampaignParticipant(campaignId) {
      // Simplified authorization for Storage rules (can't access Firestore)
      return isAuthenticated() && 
        (hasRole('nonprofit_admin') || isAdmin());
    }
    
    function isValidFileType(allowedTypes) {
      return request.resource.contentType in allowedTypes;
    }
    
    function isValidFileSize(maxSizeBytes) {
      return request.resource.size <= maxSizeBytes;
    }

    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if (
        isAuthenticated() && 
        (getUserId() == userId || isAdmin()) &&
        isValidFileType(['image/jpeg', 'image/png', 'image/webp']) &&
        isValidFileSize(5 * 1024 * 1024) // 5MB limit
      );
      allow delete: if (
        isAuthenticated() && 
        (getUserId() == userId || isAdmin())
      );
    }

    // Organization documents and images
    match /organizations/{orgId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if (
        isAuthenticated() && 
        (request.auth.token.organizationId == orgId || isAdmin()) &&
        isValidFileSize(10 * 1024 * 1024) // 10MB limit
      );
      allow delete: if (
        isAuthenticated() && 
        (request.auth.token.organizationId == orgId || isAdmin())
      );
    }
    
    // Donation-specific documents - OLD STRUCTURE (for backward compatibility)
    match /donations/{donationId}/{folder}/{fileName} {
      allow read: if isDonationParticipant(donationId);
      allow write: if (
        isDonationParticipant(donationId) &&
        isValidFileSize(25 * 1024 * 1024) && // 25MB limit
        isValidFileType([
          'application/pdf',
          'image/jpeg', 
          'image/png',
          'application/msword',
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'application/vnd.ms-excel',
          'text/plain',
          'text/csv'
        ])
      );
      allow delete: if isDonationParticipant(donationId);
    }
    
    // Participant-based documents - NEW STRUCTURE (corrected path)
    match /participants/{participantId}/{folder}/{fileName} {
      allow read: if isParticipantAuthorized(participantId);
      allow write: if (
        isParticipantAuthorized(participantId) &&
        isValidFileSize(50 * 1024 * 1024) && // 50MB limit for system uploads like signed docs
        isValidFileType([
          'application/pdf',
          'image/jpeg', 
          'image/png',
          'application/msword',
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'application/vnd.ms-excel',
          'text/plain',
          'text/csv'
        ])
      );
      allow delete: if isParticipantAuthorized(participantId);
    }
    
    // Legacy participant path structure (backward compatibility)
    match /donations/participants/{participantId}/{folder}/{fileName} {
      allow read: if isParticipantAuthorized(participantId);
      allow write: if (
        isParticipantAuthorized(participantId) &&
        isValidFileSize(25 * 1024 * 1024) && // 25MB limit
        isValidFileType([
          'application/pdf',
          'image/jpeg', 
          'image/png',
          'application/msword',
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'application/vnd.ms-excel',
          'text/plain',
          'text/csv'
        ])
      );
      allow delete: if isParticipantAuthorized(participantId);
    }
    
    // Campaign shared materials
    match /campaigns/{campaignId}/shared/{fileName} {
      allow read: if isAuthenticated();
      allow write: if (
        isCampaignParticipant(campaignId) &&
        isValidFileSize(25 * 1024 * 1024) && // 25MB limit
        isValidFileType([
          'application/pdf',
          'image/jpeg', 
          'image/png',
          'application/msword',
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          'text/plain'
        ])
      );
      allow delete: if isCampaignParticipant(campaignId) || isAdmin();
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      allow read, write: if (
        isAuthenticated() && 
        getUserId() == userId &&
        isValidFileSize(100 * 1024 * 1024) // 100MB temp limit
      );
      allow delete: if isAuthenticated() && getUserId() == userId;
    }
    
    // System/admin files
    match /system/{allPaths=**} {
      allow read, write: if isAdmin();
    }
    
    // Backup storage (admin only)
    match /backups/{allPaths=**} {
      allow read, write: if isAdmin();
    }
    
    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}