rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserRole() in roles;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function belongsToUser(userId) {
      return isAuthenticated() && getUserId() == userId;
    }
    
    function isDonationParticipant(donationData) {
      return isAuthenticated() && (
        donationData.donorId == getUserId() ||
        donationData.nonprofitAdminId == getUserId() ||
        donationData.appraiserId == getUserId()
      );
    }
    
    function isOrganizationMember(orgId) {
      return isAuthenticated() && request.auth.token.organizationId == orgId;
    }

    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read: if belongsToUser(userId) || isAdmin();
      allow write: if belongsToUser(userId) || isAdmin();
      allow create: if belongsToUser(userId);
      // Allow nonprofit admins to check if a user exists (for invitations)
      allow list: if hasRole('nonprofit_admin');
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow create: if hasAnyRole(['nonprofit_admin', 'appraiser', 'admin']);
      allow update: if isOrganizationMember(orgId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Campaigns collection
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('nonprofit_admin') || isAdmin();
      allow update: if (
        isAuthenticated() && (
          resource.data.createdBy == getUserId() ||
          isAdmin()
        )
      );
      allow delete: if isAdmin();
      
      // Campaign donations subcollection
      match /donations/{donationId} {
        allow read: if (
          isAuthenticated() && (
            resource.data.donorId == getUserId() ||
            resource.data.nonprofitAdminId == getUserId() ||
            resource.data.appraiserId == getUserId() ||
            isAdmin()
          )
        );
        allow create: if hasRole('donor') || isAdmin();
        allow update: if (
          isAuthenticated() && (
            resource.data.donorId == getUserId() ||
            resource.data.nonprofitAdminId == getUserId() ||
            resource.data.appraiserId == getUserId() ||
            isAdmin()
          )
        );
        allow delete: if isAdmin();
      }
      
      // Campaign tasks subcollection
      match /tasks/{taskId} {
        allow read: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isAdmin()
          )
        );
        allow create: if hasAnyRole(['nonprofit_admin', 'appraiser', 'admin']);
        allow update: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isAdmin()
          )
        );
        allow delete: if isAdmin();
      }
    }
    
    // Donations collection - main donation documents
    match /donations/{donationId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.donorId == getUserId() ||
          resource.data.nonprofitAdminId == getUserId() ||
          resource.data.appraiserId == getUserId() ||
          // Allow nonprofit admins to read donations for campaigns in their organization
          (hasRole('nonprofit_admin') && 
           exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
           get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == request.auth.token.organizationId) ||
          isAdmin()
        )
      );
      // Allow list/query operations for nonprofit admins to see donations for their campaigns
      allow list: if (
        isAuthenticated() && (
          hasRole('nonprofit_admin') ||
          hasRole('donor') ||
          hasRole('appraiser') ||
          isAdmin()
        )
      );
      allow create: if hasRole('donor') || isAdmin();
      allow update: if (
        isAuthenticated() && (
          resource.data.donorId == getUserId() ||
          resource.data.nonprofitAdminId == getUserId() ||
          resource.data.appraiserId == getUserId() ||
          isAdmin()
        )
      );
      allow delete: if isAdmin();
      
      // Donation tasks subcollection
      match /tasks/{taskId} {
        allow read: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isAdmin()
          )
        );
        allow create: if (
          isAuthenticated() && (
            hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']) ||
            isAdmin()
          )
        );
        allow update: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isAdmin()
          )
        );
        allow delete: if isAdmin();
      }
      
      // Donation documents subcollection
      match /documents/{docId} {
        allow read: if (
          isAuthenticated() && (
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isAdmin()
          )
        );
        allow create: if (
          isAuthenticated() && (
            hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']) ||
            isAdmin()
          )
        );
        allow update: if (
          isAuthenticated() && (
            resource.data.uploadedBy == getUserId() ||
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isAdmin()
          )
        );
        allow delete: if (
          isAuthenticated() && (
            resource.data.uploadedBy == getUserId() ||
            isAdmin()
          )
        );
      }
    }
    
    // Global tasks collection
    match /tasks/{taskId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.assignedTo == getUserId() ||
          resource.data.createdBy == getUserId() ||
          // Allow users to read tasks assigned to mock users of their role
          (resource.data.assignedTo == 'mock-' + getUserRole() + '-user' && 
           resource.data.assignedRole == getUserRole()) ||
          // Allow donation participants to read all tasks for their donations
          (resource.data.donationId != null && 
           exists(/databases/$(database)/documents/donations/$(resource.data.donationId)) &&
           (get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.donorId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.nonprofitAdminId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.appraiserId == getUserId())) ||
          isAdmin()
        )
      );
      allow create: if hasAnyRole(['nonprofit_admin', 'appraiser', 'donor', 'admin']);
      allow update: if (
        isAuthenticated() && (
          resource.data.assignedTo == getUserId() ||
          resource.data.createdBy == getUserId() ||
          // Allow users to update tasks assigned to mock users of their role
          (resource.data.assignedTo == 'mock-' + getUserRole() + '-user' && 
           resource.data.assignedRole == getUserRole()) ||
          // Allow donation participants to update tasks for their donations
          (resource.data.donationId != null && 
           exists(/databases/$(database)/documents/donations/$(resource.data.donationId)) &&
           (get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.donorId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.nonprofitAdminId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.appraiserId == getUserId())) ||
          isAdmin()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          resource.data.createdBy == getUserId() ||
          isAdmin()
        )
      );
    }
    
    // Documents collection - standalone documents
    match /documents/{docId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.uploadedBy == getUserId() ||
          resource.data.sharedWith[getUserId()] == true ||
          isAdmin()
        )
      );
      allow create: if isAuthenticated();
      allow update: if (
        isAuthenticated() && (
          resource.data.uploadedBy == getUserId() ||
          isAdmin()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          resource.data.uploadedBy == getUserId() ||
          isAdmin()
        )
      );
    }
    
    // Admin-only collections
    match /audit_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /system_config/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Campaign invitations collection
    match /campaign_invitations/{invitationId} {
      allow read: if (
        isAuthenticated() && (
          // Inviter can read their own invitations
          resource.data.inviterUserId == getUserId() ||
          // Invited user can read invitations for them by user ID
          resource.data.invitedUserId == getUserId() ||
          // Nonprofit admins can read invitations for their organization's campaigns
          (hasRole('nonprofit_admin') && 
           exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
           get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == request.auth.token.organizationId) ||
          isAdmin()
        )
      );
      // Allow unauthenticated read for invitation tokens (public invitation links)
      allow get: if true;
      // Allow unauthenticated queries for invitation tokens (for public invitation links)
      allow list: if (
        // Allow authenticated users to list their invitations
        (isAuthenticated() && (
          hasRole('nonprofit_admin') ||
          hasRole('donor') ||
          isAdmin()
        ))
      );
      allow create: if (
        hasRole('nonprofit_admin') || 
        isAdmin()
      );
      allow update: if (
        isAuthenticated() && (
          // Inviter can update their invitations
          resource.data.inviterUserId == getUserId() ||
          // Invited user can update status (accept/decline) - match by user ID
          resource.data.invitedUserId == getUserId() ||
          // Allow authenticated user to link themselves and respond to invitation
          // This handles the case where user registers and needs to accept invitation
          (request.resource.data.invitedUserId == getUserId() && 
           request.resource.data.status in ['accepted', 'declined']) ||
          isAdmin()
        )
      );
      allow delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.userId == getUserId() ||
          isAdmin()
        )
      );
      allow list: if (
        isAuthenticated() && (
          // Users can list their own notifications
          request.auth.uid == resource.data.userId ||
          isAdmin()
        )
      );
      allow create: if (
        hasAnyRole(['nonprofit_admin', 'appraiser', 'donor', 'admin'])
      );
      allow update: if (
        isAuthenticated() && (
          resource.data.userId == getUserId() ||
          isAdmin()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          resource.data.userId == getUserId() ||
          isAdmin()
        )
      );
    }
    
    // Default deny rule - blocks access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}