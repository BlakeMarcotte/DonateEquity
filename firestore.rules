rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserRole() in roles;
    }
    
    function isNonprofitAdmin() {
      return hasRole('nonprofit_admin');
    }
    
    function hasAdminSubrole() {
      return isAuthenticated() && request.auth.token.subrole == 'admin';
    }
    
    function isOrganizationAdmin() {
      return isNonprofitAdmin() && hasAdminSubrole();
    }
    
    function belongsToUser(userId) {
      return isAuthenticated() && getUserId() == userId;
    }
    
    function isDonationParticipant(donationData) {
      return isAuthenticated() && (
        donationData.donorId == getUserId() ||
        donationData.nonprofitAdminId == getUserId() ||
        donationData.appraiserId == getUserId()
      );
    }
    
    function isOrganizationMember(orgId) {
      return isAuthenticated() && request.auth.token.organizationId == orgId;
    }

    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read: if belongsToUser(userId) || isOrganizationAdmin();
      allow write: if belongsToUser(userId) || isOrganizationAdmin();
      allow create: if belongsToUser(userId);
      // Allow nonprofit admins to check if a user exists (for invitations)
      allow list: if hasRole('nonprofit_admin');
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow create: if hasAnyRole(['nonprofit_admin', 'appraiser']);
      allow update: if isOrganizationMember(orgId) || (isOrganizationAdmin() && isOrganizationMember(orgId));
      allow delete: if isOrganizationAdmin() && isOrganizationMember(orgId);
    }
    
    // Campaigns collection
    match /campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('nonprofit_admin');
      allow update: if (
        isAuthenticated() && (
          resource.data.createdBy == getUserId() ||
          (isOrganizationAdmin() && resource.data.organizationId == request.auth.token.organizationId)
        )
      );
      allow delete: if isOrganizationAdmin() && resource.data.organizationId == request.auth.token.organizationId;
      
      // Campaign donations subcollection
      match /donations/{donationId} {
        allow read: if (
          isAuthenticated() && (
            resource.data.donorId == getUserId() ||
            resource.data.nonprofitAdminId == getUserId() ||
            resource.data.appraiserId == getUserId() ||
            (isOrganizationAdmin() && resource.data.organizationId == request.auth.token.organizationId)
          )
        );
        allow create: if hasRole('donor');
        allow update: if (
          isAuthenticated() && (
            resource.data.donorId == getUserId() ||
            resource.data.nonprofitAdminId == getUserId() ||
            resource.data.appraiserId == getUserId() ||
            (isOrganizationAdmin() && resource.data.organizationId == request.auth.token.organizationId)
          )
        );
        allow delete: if isOrganizationAdmin() && resource.data.organizationId == request.auth.token.organizationId;
      }
      
      // Campaign tasks subcollection
      match /tasks/{taskId} {
        allow read: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isOrganizationAdmin()
          )
        );
        allow create: if hasAnyRole(['nonprofit_admin', 'appraiser']);
        allow update: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isOrganizationAdmin()
          )
        );
        allow delete: if isOrganizationAdmin();
      }
    }
    
    // Donations collection - main donation documents
    match /donations/{donationId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.donorId == getUserId() ||
          resource.data.nonprofitAdminId == getUserId() ||
          resource.data.appraiserId == getUserId() ||
          // Allow appraisers to read donations if they have tasks assigned to them for this donation
          hasRole('appraiser') ||
          // Allow nonprofit admins to read donations for campaigns in their organization
          (hasRole('nonprofit_admin') && 
           exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
           get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == request.auth.token.organizationId) ||
          isOrganizationAdmin()
        )
      );
      // Allow list/query operations for nonprofit admins to see donations for their campaigns
      allow list: if (
        isAuthenticated() && (
          hasRole('nonprofit_admin') ||
          hasRole('donor') ||
          hasRole('appraiser') ||
          isOrganizationAdmin()
        )
      );
      allow create: if hasRole('donor') || isOrganizationAdmin();
      allow update: if (
        isAuthenticated() && (
          resource.data.donorId == getUserId() ||
          resource.data.nonprofitAdminId == getUserId() ||
          resource.data.appraiserId == getUserId() ||
          isOrganizationAdmin()
        )
      );
      allow delete: if isOrganizationAdmin();
      
      // Donation tasks subcollection
      match /tasks/{taskId} {
        allow read: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isOrganizationAdmin()
          )
        );
        allow create: if (
          isAuthenticated() && (
            hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']) ||
            isOrganizationAdmin()
          )
        );
        allow update: if (
          isAuthenticated() && (
            resource.data.assignedTo == getUserId() ||
            resource.data.createdBy == getUserId() ||
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isOrganizationAdmin()
          )
        );
        allow delete: if isOrganizationAdmin();
      }
      
      // Donation documents subcollection
      match /documents/{docId} {
        allow read: if (
          isAuthenticated() && (
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isOrganizationAdmin()
          )
        );
        allow create: if (
          isAuthenticated() && (
            hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']) ||
            isOrganizationAdmin()
          )
        );
        allow update: if (
          isAuthenticated() && (
            resource.data.uploadedBy == getUserId() ||
            isDonationParticipant(get(/databases/$(database)/documents/donations/$(donationId)).data) ||
            isOrganizationAdmin()
          )
        );
        allow delete: if (
          isAuthenticated() && (
            resource.data.uploadedBy == getUserId() ||
            isOrganizationAdmin()
          )
        );
      }
    }
    
    // Global tasks collection
    match /tasks/{taskId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.assignedTo == getUserId() ||
          resource.data.createdBy == getUserId() ||
          // Allow users to read tasks assigned to mock users of their role
          (resource.data.assignedTo == 'mock-' + getUserRole() + '-user' && 
           resource.data.assignedRole == getUserRole()) ||
           // Allow users to read tasks assigned to their role (including null assignedTo for appraisers)
          (resource.data.assignedRole == getUserRole()) ||
          // Allow donation participants to read all tasks for their donations
          (resource.data.donationId != null && 
           exists(/databases/$(database)/documents/donations/$(resource.data.donationId)) &&
           (get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.donorId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.nonprofitAdminId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.appraiserId == getUserId())) ||
          // Allow campaign participants to read all tasks for their participation
          (resource.data.participantId != null && 
           resource.data.participantId.matches('.*_' + getUserId() + '$')) ||
          isOrganizationAdmin()
        )
      );
      // Allow list/query operations for task collections - needed for real-time listeners
      allow list: if (
        isAuthenticated() && (
          hasAnyRole(['donor', 'nonprofit_admin', 'appraiser'])
        )
      );
      allow create: if hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']);
      allow update: if (
        isAuthenticated() && (
          resource.data.assignedTo == getUserId() ||
          resource.data.createdBy == getUserId() ||
          // Allow users to update tasks assigned to mock users of their role
          (resource.data.assignedTo == 'mock-' + getUserRole() + '-user' && 
           resource.data.assignedRole == getUserRole()) ||
          // Allow users to update tasks assigned to their role (including null assignedTo for appraisers)
          (resource.data.assignedRole == getUserRole()) ||
          // Allow donation participants to update tasks for their donations
          (resource.data.donationId != null && 
           exists(/databases/$(database)/documents/donations/$(resource.data.donationId)) &&
           (get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.donorId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.nonprofitAdminId == getUserId() ||
            get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.appraiserId == getUserId())) ||
          isOrganizationAdmin()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          resource.data.createdBy == getUserId() ||
          isOrganizationAdmin()
        )
      );
    }
    
    // Documents collection - standalone documents
    match /documents/{docId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.uploadedBy == getUserId() ||
          resource.data.sharedWith[getUserId()] == true ||
          isOrganizationAdmin()
        )
      );
      allow create: if isAuthenticated();
      allow update: if (
        isAuthenticated() && (
          resource.data.uploadedBy == getUserId() ||
          isOrganizationAdmin()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          resource.data.uploadedBy == getUserId() ||
          isOrganizationAdmin()
        )
      );
    }
    
    
    // Campaign participants collection - tracks donors who have accepted invitations
    match /campaign_participants/{participantId} {
      allow read: if (
        isAuthenticated() && (
          // User can read their own participation records (using userId field)
          resource.data.userId == getUserId() ||
          // Nonprofit admins can read participants for their organization's campaigns
          (hasRole('nonprofit_admin') && 
           exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
           get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == request.auth.token.organizationId) ||
          // Appraisers can read participants they're working with
          hasRole('appraiser') ||
          // Organization admins can read all
          isOrganizationAdmin()
        )
      );
      allow list: if (
        isAuthenticated() && (
          hasRole('nonprofit_admin') ||
          hasRole('donor') ||
          hasRole('appraiser') ||
          isOrganizationAdmin()
        )
      );
      allow create: if (
        isAuthenticated() && (
          // User can create their own participation record (via API, using userId field)
          request.resource.data.userId == getUserId() ||
          // API can create participation records
          hasRole('nonprofit_admin') ||
          isOrganizationAdmin()
        )
      );
      allow update: if (
        isAuthenticated() && (
          // User can update their own participation record (using userId field)
          resource.data.userId == getUserId() ||
          // Nonprofit admins can update participants for their organization's campaigns
          (hasRole('nonprofit_admin') && 
           exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
           get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == request.auth.token.organizationId) ||
          // Appraisers can update status during workflow
          hasRole('appraiser') ||
          isOrganizationAdmin()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          // User can remove their own participation (using userId field)
          resource.data.userId == getUserId() ||
          isOrganizationAdmin()
        )
      );
    }

    // Campaign invitations collection
    match /campaign_invitations/{invitationId} {
      allow read: if (
        isAuthenticated() && (
          // Inviter can read their own invitations
          resource.data.inviterUserId == getUserId() ||
          // Invited user can read invitations for them by user ID
          resource.data.invitedUserId == getUserId() ||
          // Nonprofit admins can read invitations for their organization's campaigns
          (hasRole('nonprofit_admin') && 
           exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
           get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == request.auth.token.organizationId)
        )
      );
      // Allow unauthenticated read for invitation tokens (public invitation links)
      allow get: if true;
      // Allow unauthenticated queries for invitation tokens (for public invitation links)
      allow list: if (
        // Allow authenticated users to list their invitations
        (isAuthenticated() && (
          hasRole('nonprofit_admin') ||
          hasRole('donor')
        ))
      );
      allow create: if (
        hasRole('nonprofit_admin')
      );
      allow update: if (
        isAuthenticated() && (
          // Inviter can update their invitations
          resource.data.inviterUserId == getUserId() ||
          // Invited user can update status (accept/decline) - match by user ID
          resource.data.invitedUserId == getUserId() ||
          // Allow authenticated user to link themselves and respond to invitation
          // This handles the case where user registers and needs to accept invitation
          (request.resource.data.invitedUserId == getUserId() && 
           request.resource.data.status in ['accepted', 'declined'])
        )
      );
      allow delete: if hasRole('nonprofit_admin');
    }
    
    // Appraiser invitations collection
    match /appraiser_invitations/{invitationId} {
      allow read: if (
        isAuthenticated() && (
          // Inviter can read their own invitations
          resource.data.inviterUserId == getUserId() ||
          // Invited appraiser can read invitations for their email
          (hasRole('appraiser') && resource.data.appraiserEmail == request.auth.token.email)
        )
      );
      // Allow unauthenticated read for specific invitation tokens (public invitation links)
      allow get: if true;
      // Allow queries by invitation token (for public links)
      allow list: if (
        // Allow authenticated users to list their invitations
        (isAuthenticated() && (
          hasRole('donor') ||
          hasRole('appraiser')
        ))
      );
      allow create: if (
        hasRole('donor')
      );
      allow update: if (
        isAuthenticated() && (
          // Inviter can update their invitations
          resource.data.inviterUserId == getUserId() ||
          // Invited appraiser can accept/decline invitations for their email
          (hasRole('appraiser') && resource.data.appraiserEmail == request.auth.token.email &&
           request.resource.data.status in ['accepted', 'declined'])
        )
      );
      allow delete: if hasRole('donor');
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if (
        isAuthenticated() && (
          resource.data.userId == getUserId()
        )
      );
      allow list: if (
        isAuthenticated() && (
          // Users can list their own notifications
          request.auth.uid == resource.data.userId
        )
      );
      allow create: if (
        hasAnyRole(['nonprofit_admin', 'appraiser', 'donor'])
      );
      allow update: if (
        isAuthenticated() && (
          resource.data.userId == getUserId()
        )
      );
      allow delete: if (
        isAuthenticated() && (
          resource.data.userId == getUserId()
        )
      );
    }
    
    // Default deny rule - blocks access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}