rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Enhanced helper functions with better validation
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function getOrganizationId() {
      return request.auth.token.organizationId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserRole() in roles;
    }
    
    function isNonprofitAdmin() {
      return hasRole('nonprofit_admin');
    }
    
    function hasAdminSubrole() {
      return isAuthenticated() && request.auth.token.subrole == 'admin';
    }
    
    function isOrganizationAdmin() {
      return isNonprofitAdmin() && hasAdminSubrole();
    }
    
    function belongsToUser(userId) {
      return isAuthenticated() && getUserId() == userId;
    }
    
    function isOrganizationMember(orgId) {
      return isAuthenticated() && getOrganizationId() == orgId;
    }

    // Enhanced validation functions
    function isValidEmailUpdate() {
      return !('email' in request.resource.data) || 
             request.resource.data.email == resource.data.email;
    }
    
    function isValidRoleUpdate() {
      return !('role' in request.resource.data) || 
             request.resource.data.role == resource.data.role;
    }
    
    function isValidOrganizationUpdate() {
      return !('organizationId' in request.resource.data) || 
             request.resource.data.organizationId == resource.data.organizationId;
    }

    // Users collection - users can only access their own profile with restrictions
    match /users/{userId} {
      // Users can read their own profile, org admins can read members
      allow read: if belongsToUser(userId) || 
                     (isOrganizationAdmin() && isOrganizationMember(resource.data.organizationId));
      
      // Users can update their own profile with restrictions
      allow write: if belongsToUser(userId) && 
                      isValidEmailUpdate() && 
                      isValidRoleUpdate() && 
                      isValidOrganizationUpdate();
      
      // Only allow creating own profile
      allow create: if belongsToUser(userId) && request.resource.data.uid == userId;
      
      // Nonprofit admins can list users (for invitations) but with query restrictions
      allow list: if isNonprofitAdmin();
    }
    
    // Organizations collection with enhanced security
    match /organizations/{orgId} {
      // Read access restricted to members and public info only
      allow read: if isAuthenticated() && 
                     (isOrganizationMember(orgId) || 
                      resource.data.isPublic == true);
      
      // Only nonprofit admins can create organizations
      allow create: if hasRole('nonprofit_admin') && 
                       request.resource.data.createdBy == getUserId() &&
                       request.resource.data.organizationId == orgId;
      
      // Only organization admins can update
      allow update: if isOrganizationAdmin() && 
                       isOrganizationMember(orgId) &&
                       // Prevent unauthorized role changes
                       request.resource.data.createdBy == resource.data.createdBy;
      
      // Only organization admins can delete (soft delete recommended)
      allow delete: if isOrganizationAdmin() && isOrganizationMember(orgId);
      
      // Restrict list operations
      allow list: if isAuthenticated();
    }
    
    // Campaigns collection with enhanced restrictions
    match /campaigns/{campaignId} {
      // Read access based on visibility settings
      allow read: if isAuthenticated() && (
        resource.data.visibility == 'public' ||
        (resource.data.visibility == 'private' && isOrganizationMember(resource.data.organizationId)) ||
        resource.data.createdBy == getUserId()
      );
      
      // Only nonprofit admins can create campaigns
      allow create: if isNonprofitAdmin() && 
                       request.resource.data.createdBy == getUserId() &&
                       request.resource.data.organizationId == getOrganizationId();
      
      // Only campaign creator or org admin can update
      allow update: if isAuthenticated() && (
        resource.data.createdBy == getUserId() ||
        (isOrganizationAdmin() && isOrganizationMember(resource.data.organizationId))
      ) && 
      // Prevent unauthorized changes to sensitive fields
      request.resource.data.createdBy == resource.data.createdBy &&
      request.resource.data.organizationId == resource.data.organizationId;
      
      // Only org admins can delete
      allow delete: if isOrganizationAdmin() && isOrganizationMember(resource.data.organizationId);
      
      // List campaigns with visibility restrictions
      allow list: if isAuthenticated();
    }
    
    // Donations collection with strict participant validation
    match /donations/{donationId} {
      function isDonationParticipant() {
        return resource.data.donorId == getUserId() ||
               resource.data.nonprofitAdminId == getUserId() ||
               resource.data.appraiserId == getUserId();
      }
      
      function isCampaignOwner() {
        return exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
               get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == getOrganizationId();
      }
      
      allow read: if isAuthenticated() && (
        isDonationParticipant() ||
        (isNonprofitAdmin() && isCampaignOwner())
      );
      
      allow create: if hasRole('donor') && 
                       request.resource.data.donorId == getUserId();
      
      allow update: if isAuthenticated() && (
        isDonationParticipant() ||
        (isOrganizationAdmin() && isCampaignOwner())
      ) &&
      // Prevent unauthorized changes to participant IDs
      request.resource.data.donorId == resource.data.donorId &&
      (!('nonprofitAdminId' in resource.data) || 
       request.resource.data.nonprofitAdminId == resource.data.nonprofitAdminId);
      
      allow delete: if isOrganizationAdmin() && isCampaignOwner();
      
      allow list: if isAuthenticated() && hasAnyRole(['donor', 'nonprofit_admin', 'appraiser']);
    }
    
    // Tasks collection with enhanced participant validation
    match /tasks/{taskId} {
      function isTaskParticipant() {
        return resource.data.assignedTo == getUserId() ||
               resource.data.createdBy == getUserId() ||
               resource.data.assignedRole == getUserRole();
      }
      
      function isParticipantMatch() {
        return resource.data.participantId != null && 
               resource.data.participantId.matches('.*_' + getUserId() + '$');
      }
      
      function isDonationParticipant() {
        return resource.data.donationId != null && 
               exists(/databases/$(database)/documents/donations/$(resource.data.donationId)) &&
               (get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.donorId == getUserId() ||
                get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.nonprofitAdminId == getUserId() ||
                get(/databases/$(database)/documents/donations/$(resource.data.donationId)).data.appraiserId == getUserId());
      }
      
      allow read: if isAuthenticated() && (
        isTaskParticipant() ||
        isParticipantMatch() ||
        isDonationParticipant() ||
        isOrganizationAdmin()
      );
      
      allow create: if isAuthenticated() && hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']) &&
                       request.resource.data.createdBy == getUserId();
      
      allow update: if isAuthenticated() && (
        isTaskParticipant() ||
        isDonationParticipant() ||
        isOrganizationAdmin()
      ) &&
      // Prevent unauthorized changes to assignment
      (!('assignedTo' in request.resource.data) || 
       request.resource.data.assignedTo == resource.data.assignedTo ||
       isOrganizationAdmin());
      
      allow delete: if isAuthenticated() && (
        resource.data.createdBy == getUserId() ||
        isOrganizationAdmin()
      );
      
      // Restrict list operations to prevent excessive reads
      allow list: if isAuthenticated() && hasAnyRole(['donor', 'nonprofit_admin', 'appraiser']);
    }
    
    // Campaign participants with enhanced validation
    match /campaign_participants/{participantId} {
      function isCampaignOwner() {
        return exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
               get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == getOrganizationId();
      }
      
      allow read: if isAuthenticated() && (
        resource.data.userId == getUserId() ||
        (isNonprofitAdmin() && isCampaignOwner()) ||
        hasRole('appraiser')
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.userId == getUserId() ||
        (isNonprofitAdmin() && isCampaignOwner())
      ) &&
      // Validate participant ID format
      participantId.matches('^[a-zA-Z0-9]+_[a-zA-Z0-9]+$');
      
      allow update: if isAuthenticated() && (
        resource.data.userId == getUserId() ||
        (isNonprofitAdmin() && isCampaignOwner()) ||
        hasRole('appraiser')
      ) &&
      // Prevent unauthorized changes to core fields
      request.resource.data.userId == resource.data.userId &&
      request.resource.data.campaignId == resource.data.campaignId;
      
      allow delete: if isAuthenticated() && (
        resource.data.userId == getUserId() ||
        isOrganizationAdmin()
      );
      
      allow list: if isAuthenticated() && hasAnyRole(['nonprofit_admin', 'donor', 'appraiser']);
    }

    // Campaign invitations with enhanced security
    match /campaign_invitations/{invitationId} {
      function isCampaignOwner() {
        return exists(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)) &&
               get(/databases/$(database)/documents/campaigns/$(resource.data.campaignId)).data.organizationId == getOrganizationId();
      }
      
      allow read: if isAuthenticated() && (
        resource.data.inviterUserId == getUserId() ||
        resource.data.invitedUserId == getUserId() ||
        (isNonprofitAdmin() && isCampaignOwner())
      );
      
      // Allow unauthenticated read for valid invitation tokens only
      allow get: if resource.data.status == 'pending' && 
                    resource.data.expiresAt > request.time;
      
      allow create: if isNonprofitAdmin() && 
                       request.resource.data.inviterUserId == getUserId() &&
                       isCampaignOwner();
      
      allow update: if isAuthenticated() && (
        (resource.data.inviterUserId == getUserId() && isCampaignOwner()) ||
        (resource.data.invitedUserId == getUserId() && 
         request.resource.data.status in ['accepted', 'declined']) ||
        // Allow linking user to invitation
        (request.resource.data.invitedUserId == getUserId() && 
         resource.data.invitedUserId == null &&
         request.resource.data.status in ['accepted', 'declined'])
      ) &&
      // Prevent unauthorized changes to core fields
      request.resource.data.campaignId == resource.data.campaignId &&
      request.resource.data.inviterUserId == resource.data.inviterUserId &&
      request.resource.data.invitationToken == resource.data.invitationToken;
      
      allow delete: if isNonprofitAdmin() && 
                       resource.data.inviterUserId == getUserId() &&
                       isCampaignOwner();
      
      allow list: if isAuthenticated() && (
        isNonprofitAdmin() || hasRole('donor')
      );
    }
    
    // Appraiser invitations with validation
    match /appraiser_invitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.inviterUserId == getUserId() ||
        (hasRole('appraiser') && resource.data.appraiserEmail == request.auth.token.email)
      );
      
      allow get: if resource.data.status == 'pending' && 
                    resource.data.expiresAt > request.time;
      
      allow create: if hasRole('donor') && 
                       request.resource.data.inviterUserId == getUserId();
      
      allow update: if isAuthenticated() && (
        resource.data.inviterUserId == getUserId() ||
        (hasRole('appraiser') && 
         resource.data.appraiserEmail == request.auth.token.email &&
         request.resource.data.status in ['accepted', 'declined'])
      ) &&
      // Prevent unauthorized changes
      request.resource.data.inviterUserId == resource.data.inviterUserId &&
      request.resource.data.appraiserEmail == resource.data.appraiserEmail;
      
      allow delete: if hasRole('donor') && resource.data.inviterUserId == getUserId();
      
      allow list: if isAuthenticated() && hasAnyRole(['donor', 'appraiser']);
    }
    
    // Notifications with user isolation
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == getUserId();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == getUserId() &&
                       hasAnyRole(['nonprofit_admin', 'appraiser', 'donor']);
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == getUserId() &&
                       // Prevent changing userId
                       request.resource.data.userId == resource.data.userId;
      
      allow delete: if isAuthenticated() && resource.data.userId == getUserId();
      
      // Restrict list to own notifications only
      allow list: if isAuthenticated();
    }
    
    // Documents collection with enhanced permissions
    match /documents/{docId} {
      allow read: if isAuthenticated() && (
        resource.data.uploadedBy == getUserId() ||
        resource.data.sharedWith[getUserId()] == true ||
        isOrganizationAdmin()
      );
      
      allow create: if isAuthenticated() && 
                       request.resource.data.uploadedBy == getUserId();
      
      allow update: if isAuthenticated() && (
        resource.data.uploadedBy == getUserId() ||
        isOrganizationAdmin()
      ) &&
      // Prevent changing uploader
      request.resource.data.uploadedBy == resource.data.uploadedBy;
      
      allow delete: if isAuthenticated() && (
        resource.data.uploadedBy == getUserId() ||
        isOrganizationAdmin()
      );
      
      allow list: if isAuthenticated();
    }
    
    // Default deny rule - blocks access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}